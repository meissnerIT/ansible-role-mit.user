---
- name: Setting defaults
  ansible.builtin.set_fact:
    create_or_remove: "{{ 'Removing' if (user_state is defined and user_state == 'absent') else 'Creating' }}"

- name: Set is_jail
  ansible.builtin.set_fact:
    is_jail: "{{ 'jails' in ansible_virtualization_tech_guest }}"

- name: Setting FreeBSD defaults
  ansible.builtin.set_fact:
    user_password_lock: false
    user_create_zfs_dataset: "{{ user_create_zfs_dataset | default(not is_jail) }}"
    zfs_dataset_home: zroot/home
  when: ansible_system == "FreeBSD"

- name: Creating SFTP home for {{ username }}
  ansible.builtin.file:
    path: '''{{ user_home | default("/srv/sftp/" + username) + "/.ssh" }}'''
    state: directory
    mode: "755"
  when: user_type == 'sftp'

- name: "{{ create_or_remove }} SFTP user {{ username }}" # noqa: name[template]
  ansible.builtin.user:
    name: "{{ username }}"
    comment: '{{ user_comment | default("") }}'
    remove: true
    shell: /bin/false
    state: '{{ user_state | default("present") }}'
    group: sftp-only
    groups: "{{ user_groups }}"
    createhome: false
    home: '{{ user_home | default("/srv/sftp/" + username) }}'
    password_lock: true
  when: user_type == 'sftp'

- name: Create ZFS dataset
  ansible.builtin.command: zfs create {{ zfs_dataset_home }}/{{ username }}
  changed_when: false
  when: user_create_zfs_dataset|default(false)

- name: Check if {{ user_shell }} exists # noqa: name[template]
  ansible.builtin.command: ls {{ user_shell }}
  changed_when: false
  when: user_type == 'ssh' and user_shell is defined

- name: "{{ create_or_remove }} SSH user {{ username }}" # noqa: name[template]
  ansible.builtin.user:
    name: "{{ username }}"
    comment: '{{ user_comment | default("") }}'
    expires: "{{ user_expires | default(-1) }}"
    groups: '{{ user_groups | default("") }}'
    home: '{{ user_home | default("/home/" + username) }}'
    password_lock: "{{ user_password_lock | default(True) }}"
    remove: true # Remove home if state=absent
    shell: '{{ user_shell | default("/bin/bash") }}'
    state: '{{ user_state | default("present") }}'
  when: user_type == 'ssh'

- name: Processing system user {{ username }}
  ansible.builtin.user:
    name: "{{ username }}"
    home: "{{ user_home }}"
    create_home: false # avoid skell files
    shell: /bin/false
    system: true
    remove: true
    state: '{{ user_state | default("present") }}'
  when: user_type == 'system'

# Added password_lock to user, no need to do it via command any longer
# command: passwd --lock {{ username }}

- name: Adding ssh-key(s) to {{ username }}
  authorized_key:
    user: "{{ username }}"
    # key: "{{ lookup('pipe', 'cat files/keys/{{ user_ssh_authorized_key|default(username) }}.pub files/keys/mmeissner.pub') }}"
    key: "{{ lookup('file', 'files/keys/{{ user_ssh_key|default(username) }}.pub') }}"
    key_options: '{{ user_ssh_key_options | default("") }}'
    exclusive: "{{ user_ssh_key_exclusive | default(False) }}"
  when: (user_state is not defined or user_state != 'absent') and (user_ssh_key is not defined or user_ssh_key != 'absent') and user_type != 'system'
